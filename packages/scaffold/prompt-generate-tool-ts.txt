  As my typescript assistant 

  I need that you create a langchain command tool as a plugin for the copilot-cli-agent application.
  To do that you must fill the typescript template below with the variables:
  NAME = {name}
  DESC = {desc}
  SCHEMA = {schema}
  COMMAND = {command}

  before filling the template consider to transform <COMMAND> in a string matching the schema attribute with command parameters.

  as example :
  ls -la <path> must be translated into "ls -la {{arg.path}}" 

  and finally save generated code into a file named "<NAME>.mts" at "{path}".

  
  // beging template
  import {{ z }} from "zod";
  import {{ CommandTool, expandTilde, runCommand }} from "@bsorrentino/copilot-cli-core";

  <SCHEMA>;

  class "Camel Case of <NAME>"Tool extends CommandTool<typeof schema> {{
      name = "Snake case of <NAME>";
      description = "<DESC>";
      schema = schema;
      
      async _call(arg: z.output<typeof schema>) {{

          const res = await runCommand( <command>, this.execContext )
          return this.name +  'completed ' + res;
      }}
  }}
  export default new "Camel case of <NAME>"Tool();
  // end template